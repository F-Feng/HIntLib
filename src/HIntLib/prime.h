/*
 *  HIntLib  -  Library for High-dimensional Numerical Integration 
 *
 *  Copyright (C) 2002  Rudolf Schürer <rudolf.schuerer@sbg.ac.at>
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
 */

/**
 *  Prime
 *
 *  Basic functions for finding and checking for prime numbers
 */

#ifndef HINTLIB_PRIME_H
#define HINTLIB_PRIME_H 1

#ifdef __GNUG__
#pragma interface
#endif


#include <HIntLib/exception.h>

namespace HIntLib
{

class Prime
{
public:

   // include size of the arrays generated by create_prime

   #include <HIntLib/prime_generated.h>

   template<class T> static bool  test (T n)  HINTLIB_GNU_CONST;
   template<class T> static T     next (T n)  HINTLIB_GNU_CONST;
   template<class T> static T eulerPhi (T n)  HINTLIB_GNU_CONST;
   static void factorPrimePower (unsigned x, unsigned &_p, unsigned &_exp);
   static bool isPrimePower (unsigned x, unsigned &_p, unsigned &_exp);
   static bool isPrimePower (unsigned x);
   static unsigned nth (unsigned n)  HINTLIB_GNU_CONST;

private:

   template<class T> static bool doPrimeTest        (T n)  HINTLIB_GNU_CONST;
   template<class T> static T    searchForNextPrime (T n)  HINTLIB_GNU_CONST;

   static const unsigned short nextPrimeArray [MAX_N + 1];
   static const unsigned short nthPrimeArray [NUM_PRIMES];

   static void throwPrimeNumberNth (unsigned)  HINTLIB_GNU_NORETURN;
};


/**
 *  test()
 *
 *  Checks if a number is prime
 *
 *     isPrime(16) = false
 *     isPrime(17) = true
 */
 
template<class T>
inline
bool HIntLib::Prime::test (T n)
{
   return (n <= MAX_N)  ?  (nextPrimeArray[n] == n)  :  doPrimeTest(n);
}

template<> inline bool HIntLib::Prime::test (unsigned char n)
{
   return nextPrimeArray[n] == n;
}
template<> inline bool HIntLib::Prime::test (unsigned short n)
{
   return test (unsigned (n));
}
  

/**
 *  next()
 *
 *  Returns the first prime greater or equal to n
 *
 *     nextPrime(0) = 2
 *     nextPrime(1) = 2
 *     nextPrime(2) = 2
 *     nextPrime(3) = 3
 *     nextPrime(4) = 5
 *          :
 */

template<class T>
inline
T HIntLib::Prime::next (T n)
{
   return (n <= MAX_N)  ?  nextPrimeArray [n] : searchForNextPrime (n);
}


/**
 *  nth()
 *
 *  Returns the nth prime number
 *
 *     nthPrime(0) = 2
 *     nthPrime(1) = 3
 *     nthPrime(2) = 5
 *          :
 *     nthPrime(NUM_PRIMES-1) = ...
 */

inline
unsigned HIntLib::Prime::nth (unsigned n)
{
   if (n >= NUM_PRIMES)  throwPrimeNumberNth (n);

   return nthPrimeArray [n];
}

}  // namespace HIntLib;

#endif

