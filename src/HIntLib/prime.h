/*
 *  HIntLib  -  Library for High-dimensional Numerical Integration
 *
 *  Copyright (C) 2002  Rudolf Schürer <rudolf.schuerer@sbg.ac.at>
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
 */

#ifndef HINTLIB_PRIME_H
#define HINTLIB_PRIME_H 1

#ifdef __GNUG__
#pragma interface
#endif

#include <HIntLib/defaults.h>

#ifdef HINTLIB_HAVE_LIMITS
  #include <limits>
#else
  #include <HIntLib/fallback_limits.h>
#endif

#include <HIntLib/exception.h>

namespace HIntLib
{

/**
 *  Prime
 *
 *  Basic functions for finding and checking for prime numbers
 */

class Prime
{
public:

   // include size of the arrays generated by create_prime

   #include <HIntLib/prime_generated.h>

   template<class T> static bool  test (T n)  HINTLIB_GNU_CONST;
   template<class T> static T     next (T n)  HINTLIB_GNU_CONST;
   template<class T> static T eulerPhi (T n)  HINTLIB_GNU_CONST;
   static unsigned nth (unsigned n);

   // isPrimePower and relatives

   static void factorPrimePower (unsigned n, unsigned &_p, unsigned &_exp);
   static unsigned factorPrimePowerPrime (unsigned n)
   {
      unsigned prime, power;
      factorPrimePower (n, prime, power);
      return prime;
   }
   static unsigned factorPrimePowerPower (unsigned n)
   {
      unsigned prime, power;
      factorPrimePower (n, prime, power);
      return power;
   }
   static bool isPrimePower (unsigned n, unsigned &_p, unsigned &_exp);
   static bool isPrimePower (unsigned n)
   {
      unsigned prime, power;
      return isPrimePower (n, prime, power);
   }

private:

   template<class T> static bool doPrimeTest        (T n)  HINTLIB_GNU_CONST;
   template<class T> static T    searchForNextPrime (T n)  HINTLIB_GNU_CONST;

   HINTLIB_IMPORT static const unsigned short nextPrimeArray [MAX_N + 1];
   HINTLIB_IMPORT static const unsigned short nthPrimeArray [NUM_PRIMES];

   static void throwPrimeNumberNth (unsigned)  HINTLIB_GNU_NORETURN;
};


/**
 *  isPrimitiveRoot()
 *
 *  Deterime if  a  is a primitive element modulo the prime number p
 */

bool isPrimitiveRoot (unsigned a, unsigned p);


/**
 *  test()
 *
 *  Checks if a number is prime
 *
 *     isPrime(16) = false
 *     isPrime(17) = true
 */

template<class T>
inline
bool HIntLib::Prime::test (T n)
{
   return (n <= MAX_N)  ?  (nextPrimeArray[n] == n)  :  doPrimeTest(n);
}

template<> inline bool HIntLib::Prime::test (unsigned char n)
{
   return nextPrimeArray[n] == n;
}
template<> inline bool HIntLib::Prime::test (unsigned short n)
{
   return test (unsigned (n));
}


/**
 *  next()
 *
 *  Returns the first prime greater or equal to n
 *
 *     nextPrime(0) = 2
 *     nextPrime(1) = 2
 *     nextPrime(2) = 2
 *     nextPrime(3) = 3
 *     nextPrime(4) = 5
 *          :
 */

template<class T>
inline
T HIntLib::Prime::next (T n)
{
   return (n <= MAX_N)  ?  nextPrimeArray [n] : searchForNextPrime (n);
}


/**
 *  nth()
 *
 *  Returns the nth prime number
 *
 *     nthPrime(0) = 2
 *     nthPrime(1) = 3
 *     nthPrime(2) = 5
 *          :
 *     nthPrime(NUM_PRIMES-1) = ...
 */

inline
unsigned HIntLib::Prime::nth (unsigned n)
{
   if (n >= NUM_PRIMES)  throwPrimeNumberNth (n);

   return nthPrimeArray [n];
}


/**
 *  PrimeDivisors
 */

class PrimeDivisors
{
public:
   PrimeDivisors (unsigned _n) : n (_n), prime (1) {}

   unsigned next()
   {
      if (n <= prime)  return 0;  // done?

      if (n < prime * prime)  // n is prime?
      {
         prime = n;
         n = 1;
         return prime;
      }

      do { prime = Prime::next(prime + 1); } while (n % prime != 0);

      do { n /= prime; } while (n % prime == 0);

      return prime;
   }

   unsigned next (unsigned& e)
   {
      if (n <= prime)  return 0;  // done?

      if (n < prime * prime)  // n is prime?
      {
         e = 1;
         prime = n;
         n = 1;
         return prime;
      }

      do { prime = Prime::next(prime + 1); } while (n % prime != 0);

      e = 0;
      do { n /= prime; ++e; } while (n % prime == 0);

      return prime;
   }

private:
   unsigned n;
   unsigned prime;
};


/**
 *  gcd()
 *
 *  Calculates the greatest common divisor
 *
 *  Works for
 *     - integers
 *     - GenPolynomial2
 */

template<typename T> T gcd(T u, T v)  HINTLIB_GNU_CONST;
template<typename T> inline T gcd(T u, T v)
{
   for (;;)
   {
      if (!u)  return v;
      v %= u;

      if (!v)  return u;
      u %= v;
   }
}

template<typename T> T gcd (T, T, T&);
template<typename T> T gcd (T, T, T&, T&);


/**
 *  isCoprime()
 */

template<typename T>        bool isCoprime(T u, T v)  HINTLIB_GNU_CONST;
template<typename T> inline bool isCoprime(T u, T v)
{
   T g = gcd (u,v);

   if (std::numeric_limits<T>::is_signed)
   {
      return g == T(1) || g == T(-1);
   }
   else  // T is not signed
   {
      return g == T(1);
   }
}


/**
 *  lcm ()
 */

template<typename T> T lcm(T u, T v)  HINTLIB_GNU_CONST;
template<typename T> inline T lcm (T u, T v)
{
   return u / gcd(u,v) * v;
}

}  // namespace HIntLib;

#endif

